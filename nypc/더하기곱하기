#include <iostream>
#include <algorithm>
#include <bitset>
#include <string>
#include <map>
#include <vector>
using namespace std;

#define MAX_SIZE 1000001

map<int, int> m;
vector<bool> v;

void init()
{
	m[0] = 1;
	m[1] = 2;
	for (int i = 2; i <= 20; i++)
	{
		m[i] = m[i - 1] * 2;
	}
}

void sol(int n, int K)
{
	bitset<MAX_SIZE> bs(n);
	int s_idx, e_idx = 0;
	int cnt = 0;
	int plus_cnt = 0;
	int multi_cnt = 0;
	for (int i = K - 1; i >= 0; i--)
	{
		v.push_back(true);
	}



	if (cnt > m[s_idx])
	{
		while (1) {
			n |= 1; plus_cnt++;
		}
	}
	for (int i = K - 1; i >= 0; i--)
	{
		if (bs[i]) {
			s_idx = i;
		}
	}
	multi_cnt = K - s_idx;

	cout << plus_cnt + multi_cnt;
}


int main()
{
	int K;
	string str;

	cin >> K;
	cin >> str;

	bitset<MAX_SIZE> bs_val(str);
	init();

	sol(bs_val.to_ulong(), K);
	return 0;
}
